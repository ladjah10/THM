
âœ… REPLIT DEV TASK PROMPT: THM CODEBASE AUDIT IMPLEMENTATION

Please address the following high-priority updates across the entire codebase:

---

ðŸ”§ 1. Code Cleanup and Optimization
- âœ… Remove all duplicate endpoints in `routes.ts` â€“ especially consolidate `/api/assessment/save-progress` into a single unified handler that handles both autosave (no email) and final submission (requires email).
- âœ… Delete or archive outdated scripts and backup files:
  - `sendgrid.ts.bak`
  - `routes-payment-fix.ts` (merge its admin auth logic into main routes)
  - `fix-assessment-scores.ts`, `fix-assessment-scores-v2.ts`
  - Files inside `/temp/`
- âœ… Eliminate any unnecessary or unused variables, constants, or console logs throughout `server/` and `client/`.

---

ðŸ§  2. Scoring & Profile Logic Fixes
- âœ… Update `calculateAssessmentWithResponses()`:
  - Treat unanswered questions as zero, or enforce complete submissions with a minimum threshold or required count.
  - Confirm weights are correctly used and not defaulting unnecessarily to `12`. Ensure DB values are complete.
- âœ… Finalize psychographic profile matching: loop through all profile criteria and assign profile based on score thresholds. Add a clear fallback profile.
- âœ… Fix couple-assessment logic: ensure `saveCoupleAssessment()` and `/submit-spouse` trigger compatibility analysis only after both partners submit.

---

ðŸ§ª 3. Error Handling Consistency
- âœ… Use proper HTTP status codes:
  - `400` for client validation errors (e.g. Zod failures)
  - `500` only for internal server exceptions
- âœ… Fix all places where responses are sent but execution continues â€” use `return res.status(...).json(...)` style.
- âœ… In `server/index.ts`, remove `throw err;` after the global error handler response to avoid crashing the app.
- âœ… Use transactions for multi-step DB operations (e.g., moving data from `assessment_progress` to `assessment_results`).
- âœ… For batch operations, use per-item try/catch so one bad record doesnâ€™t halt the loop (especially for referrals, emails).

---

ðŸ”’ 4. Security Fixes
- âœ… Lock down all `/api/admin/*` routes with authentication. Use either:
  - `req.session.user.role === 'admin'`
  - Or the fixed method from `routes-payment-fix.ts` (`isUserAdmin()` + `req.isAuthenticated()`)
- âœ… Fix admin auth logic bug: update `if (!req.session?.user?.role === 'admin')` â†’ `if (!req.session?.user || req.session.user.role !== 'admin')`
- âœ… Enforce payment requirement before sending final reports:
  - Check for `transactionId` or valid promo in `transferCompletedAssessments()`
  - Delay email/send logic until payment confirmation (consider webhook-based triggers)
- âœ… Add basic rate-limiting or abuse prevention to `send-referrals` and assessment email endpoints
- âœ… Ensure any future password storage uses bcrypt hashing

---

ðŸ—‚ 5. MVC Refactor + Project Structure
- âœ… Break up `routes.ts` (huge file) into modular route files:
  - `assessmentRoutes.ts`
  - `adminRoutes.ts`
  - `coupleRoutes.ts`
  - `emailRoutes.ts`
- âœ… Group server folders:
  - `routes/` â†’ all API route files
  - `controllers/` or `services/` â†’ logic functions
  - `utils/` â†’ helpers like `nodemailer.ts`, scoring logic
- âœ… Move hardcoded email HTML into actual templates if possible

---

ðŸ§¼ 6. Readability & Maintainability
- âœ… Use consistent response format (e.g. `{ success: false, message: "..." }`) for errors across routes
- âœ… Standardize function naming and variable casing
- âœ… Add README notes that outline:
  - User journey from assessment to report
  - Admin flow
  - Stripe and DB integration steps

---

ðŸš€ 7. Deployment Compatibility (Non-Replit)
- âœ… Replace hardcoded port `5000` in `index.ts` with `process.env.PORT || 5000`
- âœ… Confirm `serveStatic(app)` in production correctly serves React files from `server/public` (adjust Vite build path if needed)
- âœ… Remove `.replit` and `replit.nix` if not deploying on Replit
- âœ… Add `.env.example` with required keys:
  DATABASE_URL=
  STRIPE_SECRET_KEY=
  STRIPE_WEBHOOK_SECRET=
  SENDGRID_API_KEY=
  NODE_ENV=production
- âœ… Ensure all tables are created via `drizzle-kit push` before app runs (donâ€™t rely on `CREATE TABLE IF NOT EXISTS` at runtime)
